diff --git a/splatnet2statink.py b/splatnet2statink.py
index 5c9d123..e9dd424 100755
--- a/splatnet2statink.py
+++ b/splatnet2statink.py
@@ -23,6 +23,7 @@ except ModuleNotFoundError as e:
 	version = None
 from subprocess import call
 from appdirs import user_data_dir
+from requests import ConnectionError
 # PIL/Pillow imported at bottom
 
 A_VERSION = "1.7.1"
@@ -177,8 +178,13 @@ def load_json(bool):
 	if bool:
 		print("Pulling data from online...") # grab data from SplatNet 2
 	url = "https://app.splatoon2.nintendo.net/api/results"
-	results_list = requests.get(url, headers=app_head, cookies=dict(iksm_session=YOUR_COOKIE))
-	return json.loads(results_list.text)
+
+	try:
+		results_list = requests.get(url, headers=app_head, cookies=dict(iksm_session=YOUR_COOKIE))
+		return json.loads(results_list.text)
+	except ConnectionError:
+		print("Network connection failed.")
+		return None
 
 def check_statink_key():
 	'''Checks if a valid length API key has been provided and, if not, prompts the user to enter one.'''
@@ -328,6 +334,9 @@ def load_results(calledby=""):
 		pass
 
 	data = load_json(False)
+	if data is None:
+		return None
+
 	try:
 		results = data["results"] # all we care about
 	except KeyError:
@@ -339,6 +348,8 @@ def load_results(calledby=""):
 			reason = "other" # server error or player hasn't battled before
 		gen_new_cookie(reason)
 		data = load_json(False)
+		if data is None:
+			return None
 		try:
 			results = data["results"] # try again with correct tokens; shouldn't get an error now...
 		except: # ...as long as there are actually battles to fetch (i.e. has played online)
@@ -351,6 +362,8 @@ def populate_battles(s_flag, t_flag, r_flag, debug):
 	'''Populates the battles list with SplatNet battles. Optionally uploads unuploaded battles.'''
 
 	results = load_results("populate")
+	if results is None:
+		return None
 
 	battles = [] # 50 recent battles on splatnet
 
@@ -360,7 +373,11 @@ def populate_battles(s_flag, t_flag, r_flag, debug):
 		printed = False
 		url  = 'https://stat.ink/api/v2/user-battle?only=splatnet_number&count=100'
 		auth = {'Authorization': 'Bearer {}'.format(API_KEY)}
-		resp = requests.get(url, headers=auth)
+		try:
+			resp = requests.get(url, headers=auth)
+		except ConnectionError:
+			print("Network connection failed.")
+			return None
 		try:
 			statink_battles = json.loads(resp.text) # 100 recent battles on stat.ink. should avoid dupes
 		except:
@@ -389,6 +406,8 @@ def monitor_battles(s_flag, t_flag, r_flag, secs, debug):
 	results = load_results("monitor") # make sure we can do it first. if error, throw it before main process
 
 	battles = populate_battles(s_flag, t_flag, r_flag, debug)
+	if battles is None:
+		battles = []
 	wins, losses, splatfest_wins, splatfest_losses, mirror_matches = [0]*5 # init all to 0
 
 	# main process
@@ -405,6 +424,8 @@ def monitor_battles(s_flag, t_flag, r_flag, secs, debug):
 				time.sleep(1)
 				sys.stdout.write("\r")
 			data = load_json(False)
+			if data is None:
+				continue
 			results = data["results"]
 			for i, result in reversed(list(enumerate(results))): # reversed chrono order
 				if int(result["battle_number"]) not in battles:
@@ -437,6 +458,8 @@ def monitor_battles(s_flag, t_flag, r_flag, secs, debug):
 	except KeyboardInterrupt:
 		print("\nChecking to see if there are unuploaded battles before exiting...")
 		data = load_json(False) # so much repeated code
+		if data is None:
+			return
 		results = data["results"]
 		foundany = False
 		for i, result in reversed(list(enumerate(results))):
@@ -496,6 +519,8 @@ def get_num_battles():
 					sys.exit(1)
 		else: # no argument
 			data = load_json(True)
+			if data is None:
+				sys.exit(1)
 
 		try:
 			results = data["results"]
@@ -1287,7 +1312,8 @@ if __name__ == "__main__":
 		if m_value != -1: # m flag exists
 			monitor_battles(is_s, is_t, is_r, m_value, debug)
 		elif is_r: # r flag exists without m, so run only the recent battle upload
-			populate_battles(is_s, is_t, is_r, debug)
+			if populate_battles(is_s, is_t, is_r, debug) is None:
+				sys.exit(1)
 		else:
 			n, results = get_num_battles()
 			for i in reversed(range(n)):
